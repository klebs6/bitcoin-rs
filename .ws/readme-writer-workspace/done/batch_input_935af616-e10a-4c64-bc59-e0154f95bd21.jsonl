{"custom_id":"request-0","method":"POST","url":"/v1/chat/completions","body":{"max_completion_tokens":8192,"messages":[{"content":"We would like you to write a README.md for a rust crate with maximally helpful content.\nAdditionally, we would like you to generate several fields from the Cargo.toml package section for this crate.\nWe will show you the strict json output format we would like you to provide.\nPlease tailor your response for an apex consumer of maximal intelligence.\nA reader of this README.md should have a good sense of what the crate does and how to use it after reading what you write.\nPlease include a messaage indicating that this README.md file was generated by an AI model and may not be 100% accurate however it should be pretty good.\n\n\nCarefully read and parse the information we sent you.\n\nWe want to generate all information items requested by our schema:\n\n- Read the description of each field. Use it, along with the content we sent you to generate an appropriate value for each.\n- Ensure that each generated field optimally serves its desired purpose.\n- Each item should be deep, detailed, and specific. Use optimally descriptive and useful language. Do not be too verbose.\n- Do not add any extra keys to the generated object. Generate precisely what we ask of you: no more, no less.\n- For fields which are of an enum type: pick *exactly one variant*. Do not generate any information for the unselected variants.\n- For array fields: supply a JSON list [ ... ] of items, each conforming to the correct item type.\n- For map fields: Provide a JSON object { \"key_as_string\": <value>, ... }. Keys must be valid JSON strings. Keys and Values must conform to the key and value schemas we provide to you. Fill all subfields of each and every map value.\n- If we ask you to justify a map field, provide your justification/confidence score for the entire map. Do not attempt to separately justify each map element.\n- Likewise, if we ask you to justify an array field, provide your justification/confidence score for the entire array. Do not attempt to separately justify each element.\n- Provide numeric fields as real JSON numbers (not strings).\n- For string fields: provide the value precisely as a string literal. If optional, you may set it to null.\n- If we ask you to justify or provide confidence scores for the fields of a structure, please do so carefully. For each field we ask you to justify, please explain or justify your choice clearly. Confidence scores must be specified as real JSON numbers in the range `[0..1]`.\n- If we ask to you generate an optional field, either fill it or set it to null.\n- If we ask you to justify your choice of an enum variant, please explain your choice clearly. Do not justify your decision to leave a variant unselected. Provide your justification as a JSON string. Provide your confidence score as a real JSON number in the range `[0..1]`.\n- In terms of the JSON format we would like you to provide, the object itself will be deserialied based on the following schema. \n- We begin exactly at the top: the data should not be nested under a parent named 'fields' or anything similar.\n\n## Here is the schema to use:\n\nObject {\n    \"fields\": Object {\n        \"crate_name\": Object {\n            \"generation_instructions\": String(\"\\\"This string should be the name of our crate, *verbatim*, trimmed for use as a toml field\\\"\"),\n            \"required\": Bool(true),\n            \"type\": String(\"string\"),\n        },\n        \"full_readme_markdown\": Object {\n            \"generation_instructions\": String(\"\\\"This string should be valid markdown representing the readme for this crate.\\\\n\\\\n Please make it terse, useful, and designed for an industrious commercially savy consumer of industrious nature. \\\\n\\\\n Advanced vocabulary and concepts are welcome. \\\\n\\\\n If this crate involves concepts from mathematics and/or physics, please describe and document them here.\\\"\"),\n            \"required\": Bool(true),\n            \"type\": String(\"string\"),\n        },\n        \"package_categories\": Object {\n            \"generation_instructions\": String(\"\\\"These categories will be used in our Cargo.toml file.\\\\n\\\\n It is important that users of this crate can find it on crates.io.\\\\n\\\\n Choose maximum 5 categories and make sure they are actually meaningful for our crate.\\\\n\\\\n These categories should only be chosen from among the legal crates.io categories. \\\\n\\\\n The ONLY legal categoreis are:\\\\n\\\\n``\\\\n accessibility\\\\n aerospace\\\\n algorithms\\\\n api-bindings\\\\n asynchronous\\\\n authentication\\\\n caching\\\\n command-line-interface\\\\n command-line-utilities\\\\n compilers\\\\n compression\\\\n computer-vision\\\\n concurrency\\\\n config\\\\n cryptography\\\\n data-structures\\\\n database\\\\n database-implementations\\\\n date-and-time\\\\n development-tools\\\\n email\\\\n embedded\\\\n emulators\\\\n encoding\\\\n external-ffi-bindings\\\\n filesystem\\\\n finance\\\\n game-development\\\\n game-engines\\\\n games\\\\n graphics\\\\n gui\\\\n hardware-support\\\\n internationalization\\\\n localization\\\\n mathematics\\\\n memory-management\\\\n multimedia\\\\n network-programming\\\\n no-std\\\\n os\\\\n parser-implementations\\\\n parsing\\\\n rendering\\\\n rust-patterns\\\\n science\\\\n simulation\\\\n template-engine\\\\n text-editors\\\\n text-processing\\\\n value-formatting\\\\n virtualization\\\\n visualization\\\\n wasm\\\\n web-programming\\\\n ``\\\\n\\\\n DO NOT specify a category that is not on this list.\\\"\"),\n            \"required\": Bool(true),\n            \"type\": String(\"array_of_strings\"),\n        },\n        \"package_description\": Object {\n            \"generation_instructions\": String(\"\\\"We will place this package_description in our Cargo.toml file so the users of this crate\\\\n know what it does.\\\\n\\\\n The discription should be technical, clear, and useful. It should be terse.\\\"\"),\n            \"required\": Bool(true),\n            \"type\": String(\"string\"),\n        },\n        \"package_keywords\": Object {\n            \"generation_instructions\": String(\"\\\"These keywords will be used in our Cargo.toml file so the users of this crate can easily\\\\n find it in the package system. Keywords should be useful, varied, meaningful, and reflect\\\\n the contents of our crate. They should make it easy to find. Please provide exactly five.\\\"\"),\n            \"required\": Bool(true),\n            \"type\": String(\"array_of_strings\"),\n        },\n    },\n    \"struct_docs\": String(\" This structure is a directive indicating which fields we need you to provide for us in your response to our query.\\n\"),\n    \"struct_name\": String(\"AiReadmeWriterDesiredOutput\"),\n    \"type\": String(\"struct\"),\n}\n\n## Please keep the following in mind:\n\nEntry phrasing:\n\n- Ensure entries are concise and focused.\n- Ensure there are no vague phrases (e.g., avoid starting with \"Illustrates the something something...\"; instead, use direct details like \"The hanging green vines on the garden wall\").\n\nEnsure Clarity and Consistency:\n\n- Use clear, grammatically correct sentences.\n- Maintain a consistent tone and style throughout.\n\nEnrich Content:\n\n- Communicate additional information where appropriate to enhance depth and value.\n- If a mathematical, physical, or otherwise technical background is helpful, please provide it.\n- Ensure that the content is comprehensive and meets all requirements.\n\nFocus Language:\n\n- Use deliberate and precise language.\n- Avoid vague verbs and keep the maximally intelligent and detail oriented audience in mind. \n- We explicitly ban the words `hush`, `subtle`, `mythic`, and `aura`. Please keep your vocabulary choices rigorous.\n- Do not use modern cultural references \n- Do not generically reference ideas which do not belong in the global environment.\n\n## Present the Final JSON:\n\n- Format the output as a JSON object.\n- Include all fields properly named from the schema we sent you.\n\nEnsure Proper Formatting:\n\n- Use proper JSON syntax with keys and arrays.\n- Ensure that all entries are correctly placed in their respective places.\n\nProvide only the final JSON data as specified by the schema. \n\nDo not include any schema generation instructions, meta-fields, nested-templates (unless directly asked) or extraneous information. \n\nProvide only the populated fields and their values, conforming exactly to the required structure without embedding any intermediate annotations or placeholders.\n\nYour output should only consist of the JSON object. do *not* include a preamble or postamble to your response. \n\nWe seek to successfully parse your response directly as JSON.","role":"system"},{"content":"We have a rust crate named 'bitcoin-syscall' 0.1.0. \n\nHere is the interface:\npub enum SyscallSandboxPolicy {\n    Initialization,\n    InitializationDnsSeed,\n    InitializationLoadBlocks,\n    InitializationMapPort,\n    MESSAGE_HANDLER,\n    NET,\n    NET_ADD_CONNECTION,\n    NET_HTTP_SERVER,\n    NET_HTTP_SERVER_WORKER,\n    NET_OPEN_CONNECTION,\n    SCHEDULER,\n    TOR_CONTROL,\n    TX_INDEX,\n    VALIDATION_SCRIPT_CHECK,\n    SHUTOFF,\n}\n\n\npub enum SyscallSandboxAction {\n    KILL_PROCESS,\n    INVOKE_SIGNAL_HANDLER,\n}\n\nlazy_static!{\n    static G_SYSCALL_SANDBOX_ENABLED:                          AtomicBool = AtomicBool::new(false);\n    static G_SYSCALL_SANDBOX_LOG_VIOLATION_BEFORE_TERMINATING: AtomicBool = AtomicBool::new(false);\n}\n\npub struct SeccompPolicyBuilder  {\n    allowed_syscalls: HashSet<u32>,\n}\n\n/// See Linux kernel developer Kees Cook's seccomp guide at <https://outflux.net/teach-seccomp/>\n/// for an accessible introduction to using seccomp.\n/// \n/// This function largely follows <https://outflux.net/teach-seccomp/step-3/syscall-reporter.c> and\n/// <https://outflux.net/teach-seccomp/step-3/seccomp-bpf.h>.\n/// Seccomp BPF resources:\n/// - Seccomp BPF documentation:\n/// <https://www.kernel.org/doc/html/latest/userspace-api/seccomp_filter.html>\n/// - seccomp(2) manual page:\n/// <https://www.kernel.org/doc/man-pages/online/pages/man2/seccomp.2.html>\n/// - Seccomp BPF demo code samples:\n/// <https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/samples/seccomp>\n///\n/// Rust port of `SyscallSandboxDebugSignalHandler`.\n/// The signature, variable names and control‑flow mirror the original C++ so that a side‑by‑side\n/// comparison is trivial.\n#[no_mangle]\npub fn syscall_sandbox_debug_signal_handler(_0: i32, signal_info: *mut siginfo_t, void_signal_context: *mut c_void) {\n    #[cfg(all(USE_SYSCALL_SANDBOX, target_os = \"linux\", target_arch = \"x86_64\"))]\n    {\n        trace!(target: \"compat::syscall_sandbox\", \"SyscallSandboxDebugSignalHandler entered\");\n\n        unsafe {\n            if signal_info.is_null() {\n                error!(target: \"compat::syscall_sandbox\", \"null siginfo_t pointer\");\n                std::process::abort();\n            }\n            assert_eq!((*signal_info).si_code, SYS_SECCOMP_SI_CODE);\n\n            if void_signal_context.is_null() {\n                error!(target: \"compat::syscall_sandbox\", \"null ucontext_t pointer\");\n                std::process::abort();\n            }\n            let signal_context: &ucontext_t = &*(void_signal_context as *const ucontext_t);\n\n            #[allow(clippy::cast_sign_loss)]\n            let syscall_number: u32 = signal_context.uc_mcontext.gregs[libc::REG_RAX as usize] as u32;\n\n            let syscall_name = get_linux_syscall_name(syscall_number);\n            let thread_name = thread_get_internal_name();\n            let thread_name = if thread_name.is_empty() {\n                \"*unnamed*\".to_owned()\n            } else {\n                thread_name\n            };\n\n            let error_message = format!(\n                \"ERROR: The syscall \\\"{}\\\" (syscall number {}) is not allowed by the syscall sandbox \\\n                in thread \\\"{}\\\". Please report.\",\n                syscall_name, syscall_number, thread_name\n            );\n\n            eprintln!(\"{error_message}\");\n            error!(target: \"compat::syscall_sandbox\", \"{error_message}\");\n\n            std::process::abort();\n        }\n        return;\n    }\n\n    // Unsupported platform – just terminate.\n    error!(\n        target: \"compat::syscall_sandbox\",\n        \"Syscall sandbox debug handler invoked on unsupported platform\"\n    );\n    std::process::abort();\n}\n\n\n/// Force the current thread (and threads created from the current thread) into\n/// a restricted-service operating mode where only a subset of all syscalls are\n/// available.\n/// \n/// Subsequent calls to this function can reduce the abilities further, but\n/// abilities can never be regained.\n/// This function is a no-op unless SetupSyscallSandbox(...) has been called.\n/// SetupSyscallSandbox(...) is called during bitcoind initialization if Bitcoin\n/// Core was compiled with seccomp-bpf support (--with-seccomp) *and* the\n/// parameter -sandbox=<mode> was passed to bitcoind.\n/// This experimental feature is available under Linux x86_64 only.\n///\npub fn set_syscall_sandbox_policy(policy: SyscallSandboxPolicy) {\n    // If the sandbox is not enabled yet, this is a no‑op – identical to C++.\n    if !g_syscall_sandbox_enabled.load(atomic::Ordering::SeqCst) {\n        return;\n    }\n\n    /* ----------- build the allow‑list ---------------------------------- */\n    let mut b = SeccompPolicyBuilder::default();\n\n    match policy {\n        /* -------- 1. initialisation‑phase buckets ---------- */\n        // SyscallSandboxPolicy::INITIALIZATION is the first policy loaded.\n        //\n        // Subsequently loaded policies can reduce the abilities further, but\n        // abilities can never be regained.\n        //\n        // SyscallSandboxPolicy::INITIALIZATION must thus be a superset of all\n        // other policies.\n        SyscallSandboxPolicy::INITIALIZATION\n            | SyscallSandboxPolicy::INITIALIZATION_DNS_SEED\n            | SyscallSandboxPolicy::INITIALIZATION_MAP_PORT => {\n            b.allow_file_system();\n            b.allow_network();\n        }\n        SyscallSandboxPolicy::INITIALIZATION_LOAD_BLOCKS => {\n            b.allow_file_system();\n        }\n\n        /* -------- 2. steady‑state buckets ------------------ */\n        SyscallSandboxPolicy::MESSAGE_HANDLER\n        | SyscallSandboxPolicy::SCHEDULER\n        | SyscallSandboxPolicy::TX_INDEX => {\n            b.allow_file_system();\n        }\n        SyscallSandboxPolicy::NET\n        | SyscallSandboxPolicy::NET_ADD_CONNECTION\n        | SyscallSandboxPolicy::NET_HTTP_SERVER\n        | SyscallSandboxPolicy::NET_HTTP_SERVER_WORKER\n        | SyscallSandboxPolicy::NET_OPEN_CONNECTION\n        | SyscallSandboxPolicy::TOR_CONTROL => {\n            b.allow_file_system();\n            b.allow_network();\n        }\n        SyscallSandboxPolicy::VALIDATION_SCRIPT_CHECK => {\n            /* nothing extra */\n        }\n\n        /* -------- 3. shutdown bucket ---------------------- */\n        SyscallSandboxPolicy::SHUTOFF => {\n            b.allow_file_system();\n        }\n    }\n\n    /* ----------- compile the BPF programme ----------------------------- */\n    let default_action = if g_syscall_sandbox_log_violation_before_terminating\n        .load(atomic::Ordering::SeqCst)\n    {\n        SyscallSandboxAction::INVOKE_SIGNAL_HANDLER\n    } else {\n        SyscallSandboxAction::KILL_PROCESS\n    };\n\n    let filter = b.build_filter(default_action);\n\n    let mut prog = libc::sock_fprog {\n        len: filter.len() as libc::c_ushort,\n        filter: filter.as_ptr() as *mut _,\n    };\n\n    /* ----------- hand the filter to the kernel ------------------------- */\n    // Do not allow abilities to be regained after being dropped.\n    //\n    // PR_SET_NO_NEW_PRIVS documentation: <https://www.kernel.org/doc/html/latest/userspace-api/no_new_privs.html>\n    unsafe {\n\n        // Prevent regaining privileges after seccomp is active\n        if libc::prctl(libc::PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0) != 0 {\n            panic!(\"Syscall sandbox enforcement failed: prctl(PR_SET_NO_NEW_PRIVS)\");\n        }\n\n        // Install seccomp-bpf syscall filter itself.\n        //\n        // PR_SET_SECCOMP documentation: <https://www.kernel.org/doc/html/latest/userspace-api/seccomp_filter.html>\n        if libc::prctl(\n            libc::PR_SET_SECCOMP,\n            libc::SECCOMP_MODE_FILTER,\n            &mut prog as *mut _,\n        ) != 0\n        {\n            panic!(\"Syscall sandbox enforcement failed: prctl(PR_SET_SECCOMP)\");\n        }\n    }\n\n    let thread = thread_get_internal_name();\n\n    info!{\n        target: \"compat::syscall_sandbox\",\n        \"Syscall filter installed for thread \\\"{}\\\"\",\n        if thread.is_empty() { \"*unnamed*\" } else { &thread }\n    };\n}\n\n\n/// This function largely follows install_syscall_reporter from Kees Cook's seccomp guide:\n/// <https://outflux.net/teach-seccomp/step-3/syscall-reporter.c>\n///\n/// Rust port of `SetupSyscallSandboxDebugHandler`.\n/// Registers `SyscallSandboxDebugSignalHandler` as the SIGSYS handler and unblocks SIGSYS so the\n/// kernel can deliver the signal.\n#[inline]\npub fn setup_syscall_sandbox_debug_handler() -> bool {\n    #[cfg(all(USE_SYSCALL_SANDBOX, target_os = \"linux\", target_arch = \"x86_64\"))]\n    {\n        unsafe {\n            trace!(\n                target: \"compat::syscall_sandbox\",\n                \"installing SIGSYS debug handler\"\n            );\n\n            let mut action: sigaction = std::mem::zeroed();\n            let mut mask = std::mem::zeroed();\n\n            sigemptyset(&mut mask);\n            sigaddset(&mut mask, SIGSYS);\n\n            action.sa_sigaction = syscall_sandbox_debug_signal_handler as usize;\n            action.sa_flags = SA_SIGINFO;\n\n            if libc::sigaction(SIGSYS, &action, ptr::null_mut()) != 0 {\n                error!(target: \"compat::syscall_sandbox\", \"sigaction failed\");\n                return false;\n            }\n            if sigprocmask(SIG_UNBLOCK, &mask, ptr::null_mut()) != 0 {\n                error!(target: \"compat::syscall_sandbox\", \"sigprocmask failed\");\n                return false;\n            }\n        }\n        return true;\n    }\n\n    false\n}\n\n\n/**\n| Setup and enable the experimental syscall\n| sandbox for the running process.\n|\n| SetSyscallSandboxPolicy(SyscallSandboxPolicy::INITIALIZATION)\n| is called as part of SetupSyscallSandbox(...).\n*/\npub fn setup_syscall_sandbox(log_before_terminate: bool) -> bool {\n    // Only succeed on first invocation (same assert as C++).\n    if G_SYSCALL_SANDBOX_ENABLED.swap(true, atomic::Ordering::SeqCst) {\n        panic!(\"SetupSyscallSandbox(...) should only be called once.\");\n    }\n    G_SYSCALL_SANDBOX_LOG_VIOLATION_BEFORE_TERMINATING\n        .store(log_before_terminate, atomic::Ordering::SeqCst);\n\n    if log_before_terminate && !setup_syscall_sandbox_debug_handler() {\n        return false;\n    }\n\n    // Load the most permissive (initialisation) profile first.\n    set_syscall_sandbox_policy(SyscallSandboxPolicy::INITIALIZATION);\n    true\n}\n\n\n/**\n| Invoke a disallowed syscall. Use for\n| testing purposes.\n|\n*/\npub fn test_disallowed_sandbox_call() {\n    // Intentionally use a syscall (getgroups) that is *not* on any allow‑list.\n    //\n    // The getgroups syscall is assumed NOT to be allowed by the syscall sandbox policy.\n    unsafe {\n        let mut buf: [libc::gid_t; 1] = [0];\n        libc::getgroups(buf.len() as libc::c_int, buf.as_mut_ptr());\n    }\n}\n\n\n/// Return the symbolic name of `syscall_number` if it\n/// is present in `LINUX_SYSCALLS`; otherwise return\n/// `\"*unknown*\"` (mirrors the C++ helper).\n#[inline]\npub fn get_linux_syscall_name(syscall_number: u32) -> String {\n    trace!(\n        target: \"compat::syscall_sandbox\",\n        syscall_number,\n        \"lookup syscall name\"\n    );\n\n    LINUX_SYSCALLS\n        .get(&syscall_number)\n        .copied()\n        .unwrap_or(\"*unknown*\")\n        .to_owned()\n}\n\n\n/// Return the current thread name or an empty\n/// string if no name has been set (mirrors\n/// `util::ThreadGetInternalName()` in the C++ code).\n#[inline]\npub fn thread_get_internal_name() -> String {\n    // First use std’s bookkeeping if present.\n    if let Some(name) = std::thread::current().name() {\n        return name.to_owned();\n    }\n\n    // Fallback to POSIX `pthread_getname_np`.\n    unsafe {\n        let mut buf = [0u8; 16]; // Linux limits names to 16 bytes inc. NUL\n        if pthread_getname_np(pthread_self(), buf.as_mut_ptr() as *mut _, buf.len()) == 0 {\n            // Strip trailing NUL and convert to UTF‑8.\n            if let Ok(s) = CStr::from_ptr(buf.as_ptr() as *const _).to_str() {\n                return s.to_owned();\n            }\n        }\n    }\n    String::new()\n}\n\nimpl Default for SeccompPolicyBuilder {\n\n    fn default() -> Self {\n        let mut builder = Self {\n            allowed_syscalls: HashSet::new(),\n        };\n    \n        // ----- Populate default set --------------------------------------\n        builder.allow_address_space_access();\n        builder.allow_epoll();\n        builder.allow_event_fd();\n        builder.allow_futex();\n        builder.allow_general_io();\n        builder.allow_get_random();\n        builder.allow_get_simple_id();\n        builder.allow_get_time();\n        builder.allow_global_process_environment();\n        builder.allow_global_system_status();\n        builder.allow_kernel_internal_api();\n        builder.allow_network_socket_information();\n        builder.allow_operation_on_existing_file_descriptor();\n        builder.allow_pipe();\n        builder.allow_prctl();\n        builder.allow_process_start_or_death();\n        builder.allow_scheduling();\n        builder.allow_signal_handling();\n        builder.allow_sleep();\n        builder.allow_umask();\n    \n        builder\n    }\n}\n\nimpl SeccompPolicyBuilder {\n\n    type SockFilter = libc::sock_filter;\n\n    type SockFprog = libc::sock_fprog;\n\n    pub fn allow_address_space_access(&mut self) {\n        trace!(\"allow_address_space_access\");\n    \n        // change data segment size\n        self.insert(libc::SYS_brk);\n    \n        // give advice about use of memory\n        self.insert(libc::SYS_madvise);\n    \n        // issue memory barriers on a set of threads\n        self.insert(libc::SYS_membarrier);\n    \n        // check if virtual memory is in RAM\n        self.insert(libc::SYS_mincore);\n    \n        // lock memory\n        self.insert(libc::SYS_mlock);\n    \n        // map files or devices into memory\n        self.insert(libc::SYS_mmap);\n    \n        // set protection on a region of memory\n        self.insert(libc::SYS_mprotect);\n    \n        // remap a file in memory\n        self.insert(libc::SYS_mremap);\n    \n        // unlock memory\n        self.insert(libc::SYS_munlock);\n    \n        // unmap files or devices into memory\n        self.insert(libc::SYS_munmap);\n    }\n\n    pub fn allow_epoll(&mut self) {\n        trace!(\"allow_epoll\");\n    \n        // open an epoll file descriptor\n        self.insert(libc::SYS_epoll_create1);\n    \n        // control interface for an epoll file descriptor\n        self.insert(libc::SYS_epoll_ctl);\n    \n        // wait for an I/O event on an epoll file descriptor\n        self.insert(libc::SYS_epoll_pwait);\n    \n        // wait for an I/O event on an epoll file descriptor\n        self.insert(libc::SYS_epoll_wait);\n    }\n\n    pub fn allow_event_fd(&mut self) {\n        trace!(\"allow_event_fd\");\n    \n        // create a file descriptor for event notification\n        self.insert(libc::SYS_eventfd2);\n    }\n\n    pub fn allow_file_system(&mut self) {\n        trace!(\"allow_file_system\");\n        // For brevity we forward to an already‑populated\n        // helper: generic I/O + stat/dir set.\n        self.allow_general_io();\n    \n        // Core directory & metadata ops (exactly those\n        // listed in the original C++).\n        for nr in &[\n    \n            // check user's permissions for a file\n            libc::SYS_access,\n    \n            // change working directory\n            libc::SYS_chdir,\n    \n            // change permissions of a file\n            libc::SYS_chmod,\n    \n            // copy a range of data from one file to another\n            libc::SYS_copy_file_range,\n    \n            // manipulate file space\n            libc::SYS_fallocate,\n    \n            // change permissions of a file\n            libc::SYS_fchmod,\n    \n            // change ownership of a file\n            libc::SYS_fchown,\n    \n            // synchronize a file's in-core state with storage device\n            libc::SYS_fdatasync,\n    \n            // apply or remove an advisory lock on an open file\n            libc::SYS_flock,\n    \n            // get file status\n            libc::SYS_fstat,\n    \n            // get file status\n            libc::SYS_newfstatat,\n    \n            // synchronize a file's in-core state with storage device\n            libc::SYS_fsync,\n    \n            // truncate a file to a specified length\n            libc::SYS_ftruncate,\n    \n            // get current working directory\n            libc::SYS_getcwd,\n    \n            // get directory entries\n            libc::SYS_getdents,\n    \n            // get directory entries\n            libc::SYS_getdents64,\n    \n            // get file status\n            libc::SYS_lstat,\n    \n            // create a directory\n            libc::SYS_mkdir,\n    \n            // open and possibly create a file\n            libc::SYS_open,\n    \n            // open and possibly create a file\n            libc::SYS_openat,\n    \n            // read value of a symbolic link\n            libc::SYS_readlink,\n    \n            // change the name or location of a file\n            libc::SYS_rename,\n    \n            // delete a directory\n            libc::SYS_rmdir,\n    \n            // get file status\n            libc::SYS_stat,\n    \n            // get filesystem statistics\n            libc::SYS_statfs,\n    \n            // get file status (extended)\n            libc::SYS_statx,\n    \n            // delete a name and possibly the file it refers to\n            libc::SYS_unlink,\n        ] {\n            self.insert(*nr);\n        }\n    }\n\n    pub fn allow_futex(&mut self) {\n        trace!(\"allow_futex\");\n    \n        // fast user-space locking\n        self.insert(libc::SYS_futex);\n    \n        // set list of robust futexes\n        self.insert(libc::SYS_set_robust_list);\n    }\n\n    pub fn allow_general_io(&mut self) {\n        trace!(\"allow_general_io\");\n    \n        // control device\n        self.insert(libc::SYS_ioctl);\n    \n        // reposition read/write file offset\n        self.insert(libc::SYS_lseek);\n    \n        // wait for some event on a file descriptor\n        self.insert(libc::SYS_poll);\n    \n        // wait for some event on a file descriptor\n        self.insert(libc::SYS_ppoll);\n    \n        // read from a file descriptor at a given offset\n        self.insert(libc::SYS_pread64);\n    \n        // write to a file descriptor at a given offset\n        self.insert(libc::SYS_pwrite64);\n    \n        // read from a file descriptor\n        self.insert(libc::SYS_read);\n    \n        // read data into multiple buffers\n        self.insert(libc::SYS_readv);\n    \n        // receive a message from a socket\n        self.insert(libc::SYS_recvfrom);\n    \n        // receive a message from a socket\n        self.insert(libc::SYS_recvmsg);\n    \n        // synchronous I/O multiplexing\n        self.insert(libc::SYS_select);\n    \n        // send multiple messages on a socket\n        self.insert(libc::SYS_sendmmsg);\n    \n        // send a message on a socket\n        self.insert(libc::SYS_sendmsg);\n    \n        // send a message on a socket\n        self.insert(libc::SYS_sendto);\n    \n        // write to a file descriptor\n        self.insert(libc::SYS_write);\n    \n        // write data into multiple buffers\n        self.insert(libc::SYS_writev);\n    }\n\n    pub fn allow_get_random(&mut self) {\n        trace!(\"allow_get_random\");\n        self.insert(libc::SYS_getrandom); // obtain a series of random bytes\n    }\n\n    pub fn allow_get_simple_id(&mut self) {\n        trace!(\"allow_get_simple_id\");\n    \n        for nr in &[\n    \n            // get group identity\n            libc::SYS_getegid, \n    \n            // get user identity\n            libc::SYS_geteuid, \n    \n            // get group identity\n            libc::SYS_getgid, \n    \n            // get process group\n            libc::SYS_getpgid,\n    \n            // get process identification\n            libc::SYS_getpid, \n    \n            // get process identification\n            libc::SYS_getppid, \n    \n            // get real, effective and saved group IDs\n            libc::SYS_getresgid, \n    \n            // get real, effective and saved user IDs\n            libc::SYS_getresuid,\n    \n            // get session ID\n            libc::SYS_getsid, \n    \n            // get thread identification\n            libc::SYS_gettid, \n    \n            // get user identity\n            libc::SYS_getuid,\n            ] {\n            self.insert(*nr);\n        }\n    }\n\n    pub fn allow_get_time(&mut self) {\n        trace!(\"allow_get_time\");\n        self.insert(libc::SYS_clock_getres);  // find resolution of the specified clock\n        self.insert(libc::SYS_clock_gettime); // retrieve the time of the specified clock\n        self.insert(libc::SYS_gettimeofday);  // get timeval\n    }\n\n    pub fn allow_global_process_environment(&mut self) {\n        trace!(\"allow_global_process_environment\");\n        self.insert(libc::SYS_getrlimit); // get resource limits\n        self.insert(libc::SYS_getrusage); // get resource usage\n        self.insert(libc::SYS_prlimit64); // get/set resource limits\n    }\n\n    pub fn allow_global_system_status(&mut self) {\n        trace!(\"allow_global_system_status\");\n        self.insert(libc::SYS_sysinfo); // return system information\n        self.insert(libc::SYS_uname);   // get name and information about current kernel\n    }\n\n    pub fn allow_kernel_internal_api(&mut self) {\n        trace!(\"allow_kernel_internal_api\");\n        self.insert(libc::SYS_restart_syscall); // restart a system call after interruption by a stop signal\n    }\n\n    pub fn allow_network(&mut self) {\n        trace!(\"allow_network\");\n    \n        for nr in &[\n            // accept a connection on a socket\n            libc::SYS_accept, \n    \n            // accept a connection on a socket\n            libc::SYS_accept4, \n    \n            // bind a name to a socket\n            libc::SYS_bind, \n    \n            // initiate a connection on a socket\n            libc::SYS_connect,\n    \n            // listen for connections on a socket\n            libc::SYS_listen, \n    \n            // set options on sockets\n            libc::SYS_setsockopt, \n    \n            // create an endpoint for communication\n            libc::SYS_socket, \n    \n            // create a pair of connected sockets\n            libc::SYS_socketpair,\n        ] {\n            self.insert(*nr);\n        }\n    }\n\n    pub fn allow_network_socket_information(&mut self) {\n        trace!(\"allow_network_socket_information\");\n        self.insert(libc::SYS_getpeername); // get name of connected peer socket\n        self.insert(libc::SYS_getsockname); // get socket name\n        self.insert(libc::SYS_getsockopt);  // get options on sockets\n    }\n\n    pub fn allow_operation_on_existing_file_descriptor(&mut self) {\n        trace!(\"allow_operation_on_existing_file_descriptor\");\n        self.insert(libc::SYS_close);    // close a file descriptor\n        self.insert(libc::SYS_dup);      // duplicate a file descriptor\n        self.insert(libc::SYS_dup2);     // duplicate a file descriptor\n        self.insert(libc::SYS_fcntl);    // manipulate file descriptor\n        self.insert(libc::SYS_shutdown); // shut down part of a full‑duplex connection\n    }\n\n    pub fn allow_pipe(&mut self) {\n        trace!(\"allow_pipe\");\n        self.insert(libc::SYS_pipe);  // create pipe\n        self.insert(libc::SYS_pipe2); // create pipe\n    }\n\n    pub fn allow_prctl(&mut self) {\n        trace!(\"allow_prctl\");\n        self.insert(libc::SYS_arch_prctl); // set architecture‑specific thread state\n        self.insert(libc::SYS_prctl);      // operations on a process\n    }\n\n    pub fn allow_process_start_or_death(&mut self) {\n        trace!(\"allow_process_start_or_death\");\n        self.insert(libc::SYS_clone);      // create a child process\n        self.insert(libc::SYS_clone3);     // create a child process\n        self.insert(libc::SYS_exit);       // terminate the calling process\n        self.insert(libc::SYS_exit_group); // exit all threads in a process\n        self.insert(libc::SYS_fork);       // create a child process\n        self.insert(libc::SYS_tgkill);     // send a signal to a thread\n        self.insert(libc::SYS_wait4);      // wait for process to change state, BSD style\n    }\n\n    pub fn allow_scheduling(&mut self) {\n        trace!(\"allow_scheduling\");\n        self.insert(libc::SYS_sched_getaffinity);  // set a thread's CPU affinity mask\n        self.insert(libc::SYS_sched_getparam);     // get scheduling parameters\n        self.insert(libc::SYS_sched_getscheduler); // get scheduling policy/parameters\n        self.insert(libc::SYS_sched_setscheduler); // set scheduling policy/parameters\n        self.insert(libc::SYS_sched_yield);        // yield the processor\n    }\n\n    pub fn allow_signal_handling(&mut self) {\n        trace!(\"allow_signal_handling\");\n        self.insert(libc::SYS_rt_sigaction);   // examine and change a signal action\n        self.insert(libc::SYS_rt_sigprocmask); // examine and change blocked signals\n        self.insert(libc::SYS_rt_sigreturn);   // return from signal handler and cleanup stack frame\n        self.insert(libc::SYS_sigaltstack);    // set and/or get signal stack context\n    }\n\n    pub fn allow_sleep(&mut self) {\n        trace!(\"allow_sleep\");\n        self.insert(libc::SYS_clock_nanosleep); // high‑resolution sleep with specifiable clock\n        self.insert(libc::SYS_nanosleep);       // high‑resolution sleep\n    }\n\n    pub fn allow_umask(&mut self) {\n        trace!(\"allow_umask\");\n        self.insert(libc::SYS_umask); // set file mode creation mask\n    }\n\n    /// 23. Convert to BPF program\n    ///\n    /// See Linux kernel developer Kees Cook's seccomp guide at\n    /// <https://outflux.net/teach-seccomp/> for an accessible introduction to using seccomp.\n    /// This function largely follows <https://outflux.net/teach-seccomp/step-3/seccomp-bpf.h>.\n    pub fn build_filter(&mut self, default_action: SyscallSandboxAction) -> Vec<SockFilter> {\n        /* ---------------- BPF opcode shorthands (see linux/filter.h) ------- */\n        const BPF_LD:  u16 = 0x00;\n        const BPF_W:   u16 = 0x00;\n        const BPF_ABS: u16 = 0x20;\n    \n        const BPF_JMP: u16 = 0x05;\n        const BPF_JEQ: u16 = 0x10;\n        const BPF_K:   u16 = 0x00;\n    \n        const BPF_RET: u16 = 0x06;\n    \n        /* ---------------- Helper macros ------------------------------------ */\n        #[inline(always)]\n        const fn bpf_stmt(code: u16, k: u32) -> SockFilter {\n            SockFilter { code, jt: 0, jf: 0, k }\n        }\n    \n        #[inline(always)]\n        const fn bpf_jump(code: u16, k: u32, jt: u8, jf: u8) -> SockFilter {\n            SockFilter { code, jt, jf, k }\n        }\n    \n        /* ---------------- struct seccomp_data layout ----------------------- */\n        const SECCOMP_DATA_NR_OFFSET:   u32 = 0; // offsetof(seccomp_data, nr)\n        const SECCOMP_DATA_ARCH_OFFSET: u32 = 4; // offsetof(seccomp_data, arch)\n    \n        /* ---------------- AUDIT_ARCH constant (x86‑64) --------------------- */\n        const AUDIT_ARCH_X86_64: u32 = 0xC000_003E;\n    \n        //----------------------------------------------------------\n        let mut bpf_policy: Vec<SockFilter> = Vec::new();\n    \n        /* ---------------- Validate architecture ---------------------- */\n        // See VALIDATE_ARCHITECTURE in seccomp-bpf.h referenced above.\n        bpf_policy.push(bpf_stmt(\n                BPF_LD | BPF_W | BPF_ABS,\n            SECCOMP_DATA_ARCH_OFFSET,\n        ));\n    \n        // Portability note: AUDIT_ARCH_X86_64 is Linux x86_64 specific.\n        bpf_policy.push(bpf_jump(\n            BPF_JMP | BPF_JEQ | BPF_K,\n            AUDIT_ARCH_X86_64,\n            1,\n            0,\n        ));\n        bpf_policy.push(bpf_stmt(BPF_RET | BPF_K, SECCOMP_RET_KILL_PROCESS as u32));\n    \n        /* ---------------- Examine syscall number -------------------- */\n        // See EXAMINE_SYSCALL in seccomp-bpf.h referenced above.\n        bpf_policy.push(bpf_stmt(\n            BPF_LD | BPF_W | BPF_ABS,\n            SECCOMP_DATA_NR_OFFSET,\n        ));\n    \n        /* ---------------- Allow‑list all collected syscalls --------- */\n        for &nr in &self.allowed_syscalls {\n            // See ALLOW_SYSCALL in seccomp-bpf.h referenced above.\n            bpf_policy.push(bpf_jump(BPF_JMP | BPF_JEQ | BPF_K, nr, 0, 1));\n            bpf_policy.push(bpf_stmt(BPF_RET | BPF_K, libc::SECCOMP_RET_ALLOW));\n        }\n    \n        /* ---------------- Default action ---------------------------- */\n        match default_action {\n            SyscallSandboxAction::KILL_PROCESS => {\n                // Disallow syscall and kill the process.\n                //\n                // See KILL_PROCESS in seccomp-bpf.h referenced above.\n                //\n                // Note that we're using SECCOMP_RET_KILL_PROCESS (kill the process) instead\n                // of SECCOMP_RET_KILL_THREAD (kill the thread). The SECCOMP_RET_KILL_PROCESS\n                // action was introduced in Linux 4.14.\n                //\n                // SECCOMP_RET_KILL_PROCESS: Results in the entire process exiting immediately without\n                // executing the system call.\n                //\n                // SECCOMP_RET_KILL_PROCESS documentation:\n                // <https://www.kernel.org/doc/html/latest/userspace-api/seccomp_filter.html>\n                bpf_policy.push(bpf_stmt(BPF_RET | BPF_K, SECCOMP_RET_KILL_PROCESS as u32));\n            }\n            SyscallSandboxAction::INVOKE_SIGNAL_HANDLER => {\n                // Disallow syscall and force a SIGSYS to trigger syscall debug reporter.\n                //\n                // SECCOMP_RET_TRAP: Results in the kernel sending a SIGSYS signal to the triggering\n                // task without executing the system call.\n                //\n                // SECCOMP_RET_TRAP documentation:\n                // <https://www.kernel.org/doc/html/latest/userspace-api/seccomp_filter.html>\n                bpf_policy.push(bpf_stmt(BPF_RET | BPF_K, SECCOMP_RET_TRAP as u32));\n            }\n        }\n    \n        bpf_policy\n    }\n}\n\n\n\n\n#[cfg(not(all(target_os = \"linux\", target_arch = \"x86_64\")))]\n/// Tiny fall‑back shims that satisfy the same public API on *every*\n/// other target so the crate still compiles.\nmod stubs {\n    // ---------------- public data ----------------\n        lazy_static!{\n            pub static ref LINUX_SYSCALLS: HashMap<u32, &'static str> = HashMap::new();\n        }\n\n    #[derive(Copy,Clone)]\n    pub enum SyscallSandboxAction {\n        KILL_PROCESS,\n        INVOKE_SIGNAL_HANDLER,\n    }\n\n    #[derive(Copy,Clone)]\n    pub enum SyscallSandboxPolicy {\n        ,\n    }\n\n    pub fn get_linux_syscall_name(_n: u32) -> String {\n        \"*unknown*\".into() \n}\n\n    pub struct SeccompPolicyBuilder  ;\n\n    impl Default for SeccompPolicyBuilder {\n    \n        fn default() -> Self {\n            Self \n        }\n    }\n\n    impl SeccompPolicyBuilder {\n    \n        pub fn build_filter(&mut self, _a: SyscallSandboxAction) -> Vec<()> {\n            Vec::new() \n        }\n    }\n\n    pub fn setup_syscall_sandbox_debug_handler() -> bool {\n        false \n}\n\n    pub fn setup_syscall_sandbox(_log: bool) -> bool {\n        false \n}\n\n    pub fn set_syscall_sandbox_policy(_p: SyscallSandboxPolicy) {\n    }\n\n    pub fn test_disallowed_sandbox_call() {\n    }\n\n    pub fn thread_get_internal_name() -> String {\n        String::new() \n}\n}\n\n\nThis crate has the following authors:\n[\n    \"klebs6 <tpk3.mx@gmail.com>\",\n]\nThis crate has the following rust edition:\n2024\nThis crate has the following license:\nMIT\n","role":"user"}],"model":"gpt-4o"}}
