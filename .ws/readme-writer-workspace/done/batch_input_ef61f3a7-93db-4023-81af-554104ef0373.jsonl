{"custom_id":"request-0","method":"POST","url":"/v1/chat/completions","body":{"max_completion_tokens":8192,"messages":[{"content":"We would like you to write a README.md for a rust crate with maximally helpful content.\nAdditionally, we would like you to generate several fields from the Cargo.toml package section for this crate.\nWe will show you the strict json output format we would like you to provide.\nPlease tailor your response for an apex consumer of maximal intelligence.\nA reader of this README.md should have a good sense of what the crate does and how to use it after reading what you write.\nPlease include a messaage indicating that this README.md file was generated by an AI model and may not be 100% accurate however it should be pretty good.\n\n\nCarefully read and parse the information we sent you.\n\nWe want to generate all information items requested by our schema:\n\n- Read the description of each field. Use it, along with the content we sent you to generate an appropriate value for each.\n- Ensure that each generated field optimally serves its desired purpose.\n- Each item should be deep, detailed, and specific. Use optimally descriptive and useful language. Do not be too verbose.\n- Do not add any extra keys to the generated object. Generate precisely what we ask of you: no more, no less.\n- For fields which are of an enum type: pick *exactly one variant*. Do not generate any information for the unselected variants.\n- For array fields: supply a JSON list [ ... ] of items, each conforming to the correct item type.\n- For map fields: Provide a JSON object { \"key_as_string\": <value>, ... }. Keys must be valid JSON strings. Keys and Values must conform to the key and value schemas we provide to you. Fill all subfields of each and every map value.\n- If we ask you to justify a map field, provide your justification/confidence score for the entire map. Do not attempt to separately justify each map element.\n- Likewise, if we ask you to justify an array field, provide your justification/confidence score for the entire array. Do not attempt to separately justify each element.\n- Provide numeric fields as real JSON numbers (not strings).\n- For string fields: provide the value precisely as a string literal. If optional, you may set it to null.\n- If we ask you to justify or provide confidence scores for the fields of a structure, please do so carefully. For each field we ask you to justify, please explain or justify your choice clearly. Confidence scores must be specified as real JSON numbers in the range `[0..1]`.\n- If we ask to you generate an optional field, either fill it or set it to null.\n- If we ask you to justify your choice of an enum variant, please explain your choice clearly. Do not justify your decision to leave a variant unselected. Provide your justification as a JSON string. Provide your confidence score as a real JSON number in the range `[0..1]`.\n- In terms of the JSON format we would like you to provide, the object itself will be deserialied based on the following schema. \n- We begin exactly at the top: the data should not be nested under a parent named 'fields' or anything similar.\n\n## Here is the schema to use:\n\nObject {\n    \"fields\": Object {\n        \"crate_name\": Object {\n            \"generation_instructions\": String(\"\\\"This string should be the name of our crate, *verbatim*, trimmed for use as a toml field\\\"\"),\n            \"required\": Bool(true),\n            \"type\": String(\"string\"),\n        },\n        \"full_readme_markdown\": Object {\n            \"generation_instructions\": String(\"\\\"This string should be valid markdown representing the readme for this crate.\\\\n\\\\n Please make it terse, useful, and designed for an industrious commercially savy consumer of industrious nature. \\\\n\\\\n Advanced vocabulary and concepts are welcome. \\\\n\\\\n If this crate involves concepts from mathematics and/or physics, please describe and document them here.\\\"\"),\n            \"required\": Bool(true),\n            \"type\": String(\"string\"),\n        },\n        \"package_categories\": Object {\n            \"generation_instructions\": String(\"\\\"These categories will be used in our Cargo.toml file.\\\\n\\\\n It is important that users of this crate can find it on crates.io.\\\\n\\\\n Choose maximum 5 categories and make sure they are actually meaningful for our crate.\\\\n\\\\n These categories should only be chosen from among the legal crates.io categories. \\\\n\\\\n The ONLY legal categoreis are:\\\\n\\\\n``\\\\n accessibility\\\\n aerospace\\\\n algorithms\\\\n api-bindings\\\\n asynchronous\\\\n authentication\\\\n caching\\\\n command-line-interface\\\\n command-line-utilities\\\\n compilers\\\\n compression\\\\n computer-vision\\\\n concurrency\\\\n config\\\\n cryptography\\\\n data-structures\\\\n database\\\\n database-implementations\\\\n date-and-time\\\\n development-tools\\\\n email\\\\n embedded\\\\n emulators\\\\n encoding\\\\n external-ffi-bindings\\\\n filesystem\\\\n finance\\\\n game-development\\\\n game-engines\\\\n games\\\\n graphics\\\\n gui\\\\n hardware-support\\\\n internationalization\\\\n localization\\\\n mathematics\\\\n memory-management\\\\n multimedia\\\\n network-programming\\\\n no-std\\\\n os\\\\n parser-implementations\\\\n parsing\\\\n rendering\\\\n rust-patterns\\\\n science\\\\n simulation\\\\n template-engine\\\\n text-editors\\\\n text-processing\\\\n value-formatting\\\\n virtualization\\\\n visualization\\\\n wasm\\\\n web-programming\\\\n ``\\\\n\\\\n DO NOT specify a category that is not on this list.\\\"\"),\n            \"required\": Bool(true),\n            \"type\": String(\"array_of_strings\"),\n        },\n        \"package_description\": Object {\n            \"generation_instructions\": String(\"\\\"We will place this package_description in our Cargo.toml file so the users of this crate\\\\n know what it does.\\\\n\\\\n The discription should be technical, clear, and useful. It should be terse.\\\"\"),\n            \"required\": Bool(true),\n            \"type\": String(\"string\"),\n        },\n        \"package_keywords\": Object {\n            \"generation_instructions\": String(\"\\\"These keywords will be used in our Cargo.toml file so the users of this crate can easily\\\\n find it in the package system. Keywords should be useful, varied, meaningful, and reflect\\\\n the contents of our crate. They should make it easy to find. Please provide exactly five.\\\"\"),\n            \"required\": Bool(true),\n            \"type\": String(\"array_of_strings\"),\n        },\n    },\n    \"struct_docs\": String(\" This structure is a directive indicating which fields we need you to provide for us in your response to our query.\\n\"),\n    \"struct_name\": String(\"AiReadmeWriterDesiredOutput\"),\n    \"type\": String(\"struct\"),\n}\n\n## Please keep the following in mind:\n\nEntry phrasing:\n\n- Ensure entries are concise and focused.\n- Ensure there are no vague phrases (e.g., avoid starting with \"Illustrates the something something...\"; instead, use direct details like \"The hanging green vines on the garden wall\").\n\nEnsure Clarity and Consistency:\n\n- Use clear, grammatically correct sentences.\n- Maintain a consistent tone and style throughout.\n\nEnrich Content:\n\n- Communicate additional information where appropriate to enhance depth and value.\n- If a mathematical, physical, or otherwise technical background is helpful, please provide it.\n- Ensure that the content is comprehensive and meets all requirements.\n\nFocus Language:\n\n- Use deliberate and precise language.\n- Avoid vague verbs and keep the maximally intelligent and detail oriented audience in mind. \n- We explicitly ban the words `hush`, `subtle`, `mythic`, and `aura`. Please keep your vocabulary choices rigorous.\n- Do not use modern cultural references \n- Do not generically reference ideas which do not belong in the global environment.\n\n## Present the Final JSON:\n\n- Format the output as a JSON object.\n- Include all fields properly named from the schema we sent you.\n\nEnsure Proper Formatting:\n\n- Use proper JSON syntax with keys and arrays.\n- Ensure that all entries are correctly placed in their respective places.\n\nProvide only the final JSON data as specified by the schema. \n\nDo not include any schema generation instructions, meta-fields, nested-templates (unless directly asked) or extraneous information. \n\nProvide only the populated fields and their values, conforming exactly to the required structure without embedding any intermediate annotations or placeholders.\n\nYour output should only consist of the JSON object. do *not* include a preamble or postamble to your response. \n\nWe seek to successfully parse your response directly as JSON.","role":"system"},{"content":"We have a rust crate named 'bitcoin-locked-page-allocator' 0.1.18. \n\nHere is the interface:\n/**\n| OS-dependent allocation and deallocation\n| of locked/pinned memory pages.\n| \n| Abstract base class.\n|\n*/\npub trait LockedPageAllocator {}\n\n\npub trait AllocateLocked {\n    fn allocate_locked(&mut self, len: usize, locking_success: *mut bool) -> *mut c_void;\n}\n\n\npub trait FreeLocked {\n    fn free_locked(&mut self, addr: *mut c_void, len: usize);\n}\n\n\npub trait GetLimit {\n    fn get_limit(&mut self) -> usize;\n}\n\n/**\n| LockedPageAllocator specialized\n| for Windows.\n|\n*/\n#[cfg(windows)]\n#[derive(Getters, Builder)]\n#[getset(get = \"pub\")]\npub struct Win32LockedPageAllocator  {\n    page_size: usize,\n}\n\n\n/**\n| LockedPageAllocator specialized\n| for OSes that don't try to be special\n| snowflakes.\n|\n*/\n#[cfg(unix)]\n#[derive(Getters, Builder)]\n#[getset(get = \"pub\")]\npub struct PosixLockedPageAllocator  {\n    page_size: usize,\n}\n\n#[cfg(windows)]\nimpl Win32LockedPageAllocator {\n\n    /// Construct a new allocator, determining the system page size at runtime.\n    pub fn new() -> Self {\n        unsafe {\n            let mut info = SYSTEM_INFO::default();\n            GetSystemInfo(&mut info);\n            Self {\n                page_size: info.dwPageSize as usize,\n            }\n        }\n    }\n}\n\n#[cfg(windows)]\nimpl Default for Win32LockedPageAllocator {\n\n    fn default() -> Self {\n        Self::new()\n    }\n}\n\n#[cfg(windows)]\nimpl LockedPageAllocator for Win32LockedPageAllocator {}\n\n#[cfg(windows)]\nimpl AllocateLocked for Win32LockedPageAllocator {\n\n    fn allocate_locked(&mut self, len: usize, locking_success: *mut bool) -> *mut c_void {\n        unsafe {\n            let aligned = align_up(len, self.page_size);\n            trace!(len, aligned, \"VirtualAlloc request (Win32)\");\n    \n            let addr = VirtualAlloc(\n                core::ptr::null_mut(),\n                aligned,\n                MEM_COMMIT | MEM_RESERVE,\n                PAGE_READWRITE,\n            );\n    \n            if addr.is_null() {\n                error!(aligned, \"VirtualAlloc failed\");\n                return core::ptr::null_mut();\n            }\n    \n            // VirtualLock is used to attempt to keep keying material out of swap. Note\n            // that it does not provide this as a guarantee, but, in practice, memory\n            // that has been VirtualLock'd almost never gets written to the pagefile\n            // except in rare circumstances where memory is extremely low.\n            let locked = VirtualLock(addr, aligned) != 0;\n            *locking_success = locked;\n    \n            if !locked {\n                warn!(aligned, \"VirtualLock failed – page may be paged out\");\n            }\n    \n            trace!(?addr, locked, \"allocate_locked complete\");\n            addr as *mut c_void\n        }\n    }\n}\n\n#[cfg(windows)]\nimpl FreeLocked for Win32LockedPageAllocator {\n\n    fn free_locked(&mut self, addr: *mut c_void, len: usize) {\n        unsafe {\n            if addr.is_null() || len == 0 {\n                return;\n            }\n            let aligned = align_up(len, self.page_size);\n            memory_cleanse(addr, aligned);\n    \n            // Best‑effort unlock; ignore failure.\n            VirtualUnlock(addr, aligned);\n    \n            let released = VirtualFree(addr, 0, MEM_RELEASE) != 0;\n            if !released {\n                warn!(?addr, \"VirtualFree failed\");\n            }\n    \n            trace!(?addr, aligned, released, \"free_locked complete\");\n        }\n    }\n}\n\n#[cfg(windows)]\nimpl GetLimit for Win32LockedPageAllocator {\n\n    fn get_limit(&mut self) -> usize {\n        // Windows does not expose a per‑process mlock limit; treat as “unlimited”.\n        usize::MAX\n    }\n}\n\n#[cfg(unix)]\nimpl LockedPageAllocator for PosixLockedPageAllocator {}\n\n#[cfg(unix)]\nimpl AllocateLocked for PosixLockedPageAllocator {\n\n    fn allocate_locked(&mut self, len: usize, locking_success: *mut bool) -> *mut c_void {\n        unsafe {\n            let aligned = align_up(len, self.page_size);\n            trace!(len, aligned, \"mmap request (POSIX)\");\n    \n            let addr = mmap(\n                core::ptr::null_mut(),\n                aligned,\n                PROT_READ | PROT_WRITE,\n                MAP_PRIVATE | MAP_ANONYMOUS,\n                -1,\n                0,\n            );\n    \n            if addr == MAP_FAILED {\n                error!(len, \"mmap failed\");\n                return core::ptr::null_mut();\n            }\n    \n            let locked = mlock(addr, aligned) == 0;\n            *locking_success = locked;\n            if !locked {\n                warn!(aligned, \"mlock failed – page will not be resident\");\n            }\n    \n            #[cfg(target_os = \"linux\")]\n            madvise(addr, aligned, MADV_DONTDUMP);\n    \n            #[cfg(target_os = \"freebsd\")]\n            madvise(addr, aligned, MADV_NOCORE);\n    \n            trace!(?addr, locked, \"allocate_locked complete\");\n            addr\n        }\n    }\n}\n\n#[cfg(unix)]\nimpl FreeLocked for PosixLockedPageAllocator {\n\n    fn free_locked(&mut self, addr: *mut c_void, len: usize) {\n        unsafe {\n            if addr.is_null() || len == 0 {\n                return;\n            }\n            let aligned = align_up(len, self.page_size);\n            memory_cleanse(addr, aligned);\n            munlock(addr, aligned);\n            munmap(addr, aligned);\n            trace!(?addr, aligned, \"free_locked complete\");\n        }\n    }\n}\n\n#[cfg(unix)]\nimpl GetLimit for PosixLockedPageAllocator {\n\n    fn get_limit(&mut self) -> usize {\n        unsafe {\n            let mut rlim = core::mem::zeroed();\n            if getrlimit(RLIMIT_MEMLOCK, &mut rlim) == 0 && rlim.rlim_cur != RLIM_INFINITY {\n                return rlim.rlim_cur as usize;\n            }\n        }\n        usize::MAX\n    }\n}\n\n#[cfg(unix)]\nimpl Default for PosixLockedPageAllocator {\n\n    /// Run‑time discovery of the system page size **with robust fall‑backs**.\n    ///\n    /// * Ensures the determined page size is a power‑of‑two – a hard\n    ///   requirement for `align_up`’s internal invariants.\n    /// * Emits helpful diagnostics when the platform call fails or returns an\n    ///   unexpected value (e.g. non‑power‑of‑two on exotic platforms).\n    /// This closes the crash pathway observed in `locked_pool_full_coverage`\n    /// where `sysconf(_SC_PAGESIZE)` returned an error (‑1), propagating a\n    /// non‑power‑of‑two into `align_up`, which then tripped its `debug_assert!`.\n    fn default() -> Self {\n        // SAFETY: `sysconf` is a simple, re‑entrant libc wrapper.\n        let raw_pagesize = unsafe { sysconf(_SC_PAGESIZE) };\n    \n        // Convert and validate.  A negative or zero result signals failure.\n        let mut ps = if raw_pagesize > 0 {\n            raw_pagesize as usize\n        } else {\n            warn!(\n                target: \"locked_page_alloc\",\n                raw_pagesize,\n                \"sysconf(_SC_PAGESIZE) failed – falling back to 4 KiB\"\n            );\n            4 * 1024 // universally valid, conservative default\n        };\n    \n        // Enforce power‑of‑two to satisfy `align_up` invariants.\n        if !ps.is_power_of_two() {\n            let rounded = ps.next_power_of_two();\n            warn!(\n                target: \"locked_page_alloc\",\n                original = ps,\n                rounded,\n                \"page size not power‑of‑two – rounding up\"\n            );\n            ps = rounded;\n        }\n    \n        trace!(\n            target: \"locked_page_alloc\",\n            page_size = ps,\n            \"PosixLockedPageAllocator initialised\"\n        );\n        Self { page_size: ps }\n    }\n}\n\n\nThis crate has the following authors:\n[\n    \"klebs6 <tpk3.mx@gmail.com>\",\n]\nThis crate has the following rust edition:\n2024\nThis crate has the following license:\nMIT\n","role":"user"}],"model":"gpt-4o"}}
