{"custom_id":"request-0","method":"POST","url":"/v1/chat/completions","body":{"max_completion_tokens":8192,"messages":[{"content":"We would like you to write a README.md for a rust crate with maximally helpful content.\nAdditionally, we would like you to generate several fields from the Cargo.toml package section for this crate.\nWe will show you the strict json output format we would like you to provide.\nPlease tailor your response for an apex consumer of maximal intelligence.\nA reader of this README.md should have a good sense of what the crate does and how to use it after reading what you write.\nPlease include a messaage indicating that this README.md file was generated by an AI model and may not be 100% accurate however it should be pretty good.\n\n\nCarefully read and parse the information we sent you.\n\nWe want to generate all information items requested by our schema:\n\n- Read the description of each field. Use it, along with the content we sent you to generate an appropriate value for each.\n- Ensure that each generated field optimally serves its desired purpose.\n- Each item should be deep, detailed, and specific. Use optimally descriptive and useful language. Do not be too verbose.\n- Do not add any extra keys to the generated object. Generate precisely what we ask of you: no more, no less.\n- For fields which are of an enum type: pick *exactly one variant*. Do not generate any information for the unselected variants.\n- For array fields: supply a JSON list [ ... ] of items, each conforming to the correct item type.\n- For map fields: Provide a JSON object { \"key_as_string\": <value>, ... }. Keys must be valid JSON strings. Keys and Values must conform to the key and value schemas we provide to you. Fill all subfields of each and every map value.\n- If we ask you to justify a map field, provide your justification/confidence score for the entire map. Do not attempt to separately justify each map element.\n- Likewise, if we ask you to justify an array field, provide your justification/confidence score for the entire array. Do not attempt to separately justify each element.\n- Provide numeric fields as real JSON numbers (not strings).\n- For string fields: provide the value precisely as a string literal. If optional, you may set it to null.\n- If we ask you to justify or provide confidence scores for the fields of a structure, please do so carefully. For each field we ask you to justify, please explain or justify your choice clearly. Confidence scores must be specified as real JSON numbers in the range `[0..1]`.\n- If we ask to you generate an optional field, either fill it or set it to null.\n- If we ask you to justify your choice of an enum variant, please explain your choice clearly. Do not justify your decision to leave a variant unselected. Provide your justification as a JSON string. Provide your confidence score as a real JSON number in the range `[0..1]`.\n- In terms of the JSON format we would like you to provide, the object itself will be deserialied based on the following schema. \n- We begin exactly at the top: the data should not be nested under a parent named 'fields' or anything similar.\n\n## Here is the schema to use:\n\nObject {\n    \"fields\": Object {\n        \"crate_name\": Object {\n            \"generation_instructions\": String(\"\\\"This string should be the name of our crate, *verbatim*, trimmed for use as a toml field\\\"\"),\n            \"required\": Bool(true),\n            \"type\": String(\"string\"),\n        },\n        \"full_readme_markdown\": Object {\n            \"generation_instructions\": String(\"\\\"This string should be valid markdown representing the readme for this crate.\\\\n\\\\n Please make it terse, useful, and designed for an industrious commercially savy consumer of industrious nature. \\\\n\\\\n Advanced vocabulary and concepts are welcome. \\\\n\\\\n If this crate involves concepts from mathematics and/or physics, please describe and document them here.\\\"\"),\n            \"required\": Bool(true),\n            \"type\": String(\"string\"),\n        },\n        \"package_categories\": Object {\n            \"generation_instructions\": String(\"\\\"These categories will be used in our Cargo.toml file.\\\\n\\\\n It is important that users of this crate can find it on crates.io.\\\\n\\\\n Choose maximum 5 categories and make sure they are actually meaningful for our crate.\\\\n\\\\n These categories should only be chosen from among the legal crates.io categories. \\\\n\\\\n The ONLY legal categoreis are:\\\\n\\\\n``\\\\n accessibility\\\\n aerospace\\\\n algorithms\\\\n api-bindings\\\\n asynchronous\\\\n authentication\\\\n caching\\\\n command-line-interface\\\\n command-line-utilities\\\\n compilers\\\\n compression\\\\n computer-vision\\\\n concurrency\\\\n config\\\\n cryptography\\\\n data-structures\\\\n database\\\\n database-implementations\\\\n date-and-time\\\\n development-tools\\\\n email\\\\n embedded\\\\n emulators\\\\n encoding\\\\n external-ffi-bindings\\\\n filesystem\\\\n finance\\\\n game-development\\\\n game-engines\\\\n games\\\\n graphics\\\\n gui\\\\n hardware-support\\\\n internationalization\\\\n localization\\\\n mathematics\\\\n memory-management\\\\n multimedia\\\\n network-programming\\\\n no-std\\\\n os\\\\n parser-implementations\\\\n parsing\\\\n rendering\\\\n rust-patterns\\\\n science\\\\n simulation\\\\n template-engine\\\\n text-editors\\\\n text-processing\\\\n value-formatting\\\\n virtualization\\\\n visualization\\\\n wasm\\\\n web-programming\\\\n ``\\\\n\\\\n DO NOT specify a category that is not on this list.\\\"\"),\n            \"required\": Bool(true),\n            \"type\": String(\"array_of_strings\"),\n        },\n        \"package_description\": Object {\n            \"generation_instructions\": String(\"\\\"We will place this package_description in our Cargo.toml file so the users of this crate\\\\n know what it does.\\\\n\\\\n The discription should be technical, clear, and useful. It should be terse.\\\"\"),\n            \"required\": Bool(true),\n            \"type\": String(\"string\"),\n        },\n        \"package_keywords\": Object {\n            \"generation_instructions\": String(\"\\\"These keywords will be used in our Cargo.toml file so the users of this crate can easily\\\\n find it in the package system. Keywords should be useful, varied, meaningful, and reflect\\\\n the contents of our crate. They should make it easy to find. Please provide exactly five.\\\"\"),\n            \"required\": Bool(true),\n            \"type\": String(\"array_of_strings\"),\n        },\n    },\n    \"struct_docs\": String(\" This structure is a directive indicating which fields we need you to provide for us in your response to our query.\\n\"),\n    \"struct_name\": String(\"AiReadmeWriterDesiredOutput\"),\n    \"type\": String(\"struct\"),\n}\n\n## Please keep the following in mind:\n\nEntry phrasing:\n\n- Ensure entries are concise and focused.\n- Ensure there are no vague phrases (e.g., avoid starting with \"Illustrates the something something...\"; instead, use direct details like \"The hanging green vines on the garden wall\").\n\nEnsure Clarity and Consistency:\n\n- Use clear, grammatically correct sentences.\n- Maintain a consistent tone and style throughout.\n\nEnrich Content:\n\n- Communicate additional information where appropriate to enhance depth and value.\n- If a mathematical, physical, or otherwise technical background is helpful, please provide it.\n- Ensure that the content is comprehensive and meets all requirements.\n\nFocus Language:\n\n- Use deliberate and precise language.\n- Avoid vague verbs and keep the maximally intelligent and detail oriented audience in mind. \n- We explicitly ban the words `hush`, `subtle`, `mythic`, and `aura`. Please keep your vocabulary choices rigorous.\n- Do not use modern cultural references \n- Do not generically reference ideas which do not belong in the global environment.\n\n## Present the Final JSON:\n\n- Format the output as a JSON object.\n- Include all fields properly named from the schema we sent you.\n\nEnsure Proper Formatting:\n\n- Use proper JSON syntax with keys and arrays.\n- Ensure that all entries are correctly placed in their respective places.\n\nProvide only the final JSON data as specified by the schema. \n\nDo not include any schema generation instructions, meta-fields, nested-templates (unless directly asked) or extraneous information. \n\nProvide only the populated fields and their values, conforming exactly to the required structure without embedding any intermediate annotations or placeholders.\n\nYour output should only consist of the JSON object. do *not* include a preamble or postamble to your response. \n\nWe seek to successfully parse your response directly as JSON.","role":"system"},{"content":"We have a rust crate named 'bitcoin-locked-pool' 0.1.1. \n\nHere is the interface:\n/// Callback when allocation succeeds but locking fails.\n///\n/// Return `true` to proceed (warnings only) or `false` to abort the allocation.\npub type LockingFailed_Callback = fn() -> bool;\n\n/**\n| Pool for locked memory chunks.\n| \n| To avoid sensitive key data from being\n| swapped to disk, the memory in this pool\n| is locked/pinned.\n| An arena manages a contiguous region\n| of memory. The pool starts out with one\n| arena but can grow to multiple arenas\n| if the need arises.\n| Unlike a normal C heap, the administrative\n| structures are separate from the managed\n| memory. This has been done as the sizes\n| and bases of objects are not in themselves\n| sensitive information, as to conserve\n| precious locked memory. In some operating\n| systems the amount of memory that can\n| be locked is small.\n|\n*/\n#[no_copy]\n#[derive(Getters,MutGetters)]\n#[getset(get = \"pub\", get_mut = \"pub\")]\npub struct LockedPool  {\n    allocator:               Box<dyn LockedPageAllocator + Send + Sync>,\n    arenas:                  Vec<LockedPageArena>,\n    lf_cb:                   Option<LockingFailed_Callback>,\n    cumulative_bytes_locked: usize,\n    mutex:                   Mutex<()>,\n}\n\n\n/**\n| Singleton class to keep track of locked\n| (ie, non-swappable) memory, for use\n| in std::allocator templates.\n| \n| Some implementations of the STL allocate\n| memory in some constructors (i.e.,\n| see MSVC's vector<T> implementation where\n| it allocates 1 byte of memory in the allocator.)\n| Due to the unpredictable order of static\n| initializers, we have to make sure the\n| LockedPoolManager instance exists\n| before any other STL-based objects\n| that use secure_allocator are created.\n| So instead of having LockedPoolManager\n| also be static-initialized, it is created\n| on demand.\n|\n*/\npub struct LockedPoolManager  {\n    base: LockedPool,\n}\n\n\npub struct LockedPageArena  {\n    arena:     Arena,\n    base:      *mut c_void,\n    size:      usize,\n    allocator: *mut dyn LockedPageAllocator,\n}\n\n\n/// Pool-wide memory statistics.\n#[derive(Getters, Builder, Default, Debug, Clone)]\n#[builder(setter(into, strip_option), pattern = \"owned\")]\n#[getset(get = \"pub\")]\npub struct LockedPoolStats  {\n    used:        usize,\n    free:        usize,\n    total:       usize,\n    locked:      usize,\n    chunks_used: usize,\n    chunks_free: usize,\n}\n\nimpl LockedPool {\n\n    /// Allocate `size` bytes; returns a null pointer on failure or for `size==0`.\n    ///\n    /// Allocate size bytes from this arena.\n    /// \n    /// Returns pointer on success, or 0 if memory is full or the application tried to allocate\n    /// 0 bytes.\n    #[inline]\n    pub fn alloc(&mut self, size: usize) -> *mut c_void {\n        if size == 0 || size > LOCKED_POOL_ARENA_SIZE {\n            return std::ptr::null_mut();\n        }\n    \n        /* ---------- fast path: existing arenas ---------- */\n        for arena in self.arenas_mut() {\n            let ptr = arena.alloc(size);\n            if !ptr.is_null() {\n                trace!(size, ?ptr, \"LockedPool::alloc from existing arena\");\n                return ptr;\n            }\n        }\n    \n        /* ---------- slow path: create one new arena ---------- */\n        if self.new_arena(LOCKED_POOL_ARENA_SIZE, LOCKED_POOL_ARENA_ALIGN) {\n            if let Some(last) = self.arenas_mut().last_mut() {\n                let ptr = last.alloc(size);\n                trace!(size, ?ptr, \"LockedPool::alloc after new arena\");\n                return ptr;\n            }\n        }\n        std::ptr::null_mut()\n    }\n\n    /// Free a previously‑allocated chunk. Passing `null` is a no‑op.\n    /// \n    /// Freeing the zero pointer has no effect.\n    /// Raises std::runtime_error in case of error.\n    ///\n    #[inline]\n    pub fn free(&mut self, ptr: *mut c_void) {\n        if ptr.is_null() {\n            return;\n        }\n    \n        for arena in self.arenas_mut() {\n            if arena.address_in_arena(ptr) {\n                arena.free(ptr);\n                return;\n            }\n        }\n        panic!(\"LockedPool::free – invalid address (not in any arena)\");\n    }\n}\n\nimpl Drop for LockedPool {\n\n    /// Ensure that all `LockedPageArena`s are destroyed **before**\n    /// the underlying `allocator` is dropped.\n    ///\n    /// Each arena stores a raw pointer back to `self.allocator`.  If the\n    /// allocator were dropped first (the default field‑drop order), the\n    /// arenas would dereference a dangling pointer in their own `drop`,\n    /// leading to UB and the panic observed in `locked_pool_full_coverage`.\n    /// We explicitly clear the arenas *inside* this `drop` implementation,\n    /// guaranteeing that their destructors run while the allocator is still\n    /// alive and valid.\n    fn drop(&mut self) {\n        // Move the arenas out, leaving an empty Vec behind so `self` stays\n        // structurally valid for the remainder of the destructor.\n        let arenas = std::mem::take(&mut self.arenas);\n    \n        trace!(\n            total = arenas.len(),\n            \"LockedPool::drop – dropping arenas before allocator\"\n        );\n    \n        // Drop the arenas *now* (before `allocator` goes away).\n        drop(arenas);\n    \n        // Remaining fields (`allocator`, `mutex`, …) are dropped automatically\n        // in declaration order *after* this function returns.\n    }\n}\n\nimpl LockedPool {\n\n    /// Create a new LockedPool. This takes ownership of the MemoryPageLocker, you can only\n    /// instantiate this with LockedPool(std::move(...)).\n    /// \n    /// The second argument is an optional callback when locking a newly allocated arena failed.\n    /// If this callback is provided and returns false, the allocation fails (hard fail), if it\n    /// returns true the allocation proceeds, but it could warn.\n    pub fn new(allocator_in: Box<dyn LockedPageAllocator + Send + Sync>, lf_cb_in: Option<LockingFailed_Callback>) -> Self {\n        Self {\n            allocator: allocator_in,\n            arenas:    Vec::new(),\n            lf_cb:     lf_cb_in,\n            cumulative_bytes_locked: 0,\n            mutex:     Mutex::new(()),\n        }\n    }\n\n    /// Allocate a brand‑new arena; returns `true` on success.\n    pub fn new_arena(&mut self, mut size: usize, align: usize) -> bool {\n        // First arena: never exceed the process limit (except when the limit is 0).\n        //\n        // If this is the first arena, handle this specially: Cap the upper size\n        // by the process limit. This makes sure that the first arena will at least\n        // be locked. An exception to this is if the process limit is 0:\n        // in this case no memory can be locked at all so we'll skip past this logic.\n        if self.arenas.is_empty() {\n            let limit = self.allocator.get_limit();\n            if limit > 0 {\n                size = size.min(limit);\n            }\n        }\n    \n        let mut locked = false;\n        let addr = unsafe { self.allocator.allocate_locked(size, &mut locked as *mut bool) };\n        if addr.is_null() {\n            return false;\n        }\n    \n        if locked {\n            self.cumulative_bytes_locked += size;\n    \n        } else if let Some(cb) = self.lf_cb {\n            // Call the locking-failed callback if locking failed\n    \n            // If the callback returns false, free the memory and fail, otherwise consider the user\n            // warned and proceed.\n            //\n            if !cb() {\n                // User vetoed continuing without locking; clean up.\n                unsafe { self.allocator.free_locked(addr, size) };\n                return false;\n            }\n        }\n    \n        // Safety: `addr … addr+size` live for the arena’s lifetime.\n        let arena = unsafe {\n            LockedPageArena::new(\n                &mut *self.allocator as *mut dyn LockedPageAllocator,\n                addr,\n                size,\n                align,\n            )\n        };\n        self.arenas.push(arena);\n        true\n    }\n}\n\nimpl Send for LockedPoolManager {}\n\nimpl Sync for LockedPoolManager {}\n\nimpl LockedPoolManager {\n\n    /// Obtain the global instance (lazily initialised once, thread‑safe).\n    pub fn instance() -> &'static Self {\n        use once_cell::sync::OnceCell;\n        static INSTANCE: OnceCell<LockedPoolManager> = OnceCell::new();\n        INSTANCE.get_or_init(|| {\n            #[cfg(windows)]\n            let alloc: Box<dyn LockedPageAllocator + Send + Sync> = Box::new(\n                bitcoin_locked_page_allocator::Win32LockedPageAllocator::default(),\n            );\n            #[cfg(unix)]\n            let alloc: Box<dyn LockedPageAllocator + Send + Sync> = Box::new(\n                bitcoin_locked_page_allocator::PosixLockedPageAllocator::default(),\n            );\n            Self::new(alloc)\n        })\n    }\n}\n\nimpl Deref for LockedPoolManager {\n\n    type Target = LockedPool;\n\n    fn deref(&self) -> &Self::Target {\n        &self.base \n    }\n}\n\nimpl DerefMut for LockedPoolManager {\n\n    fn deref_mut(&mut self) -> &mut Self::Target {\n        &mut self.base \n    }\n}\n\nimpl Drop for LockedPageArena {\n\n    fn drop(&mut self) {\n        unsafe {\n            if !self.base.is_null() && self.size != 0 {\n                // Safety: allocator pointer remains valid for the arena's lifetime\n                (*self.allocator).free_locked(self.base, self.size);\n            }\n        }\n    }\n}\n\nimpl LockedPageArena {\n\n    /// # Safety\n    /// `base_in … base_in+size_in` must be valid for the lifetime of the arena.\n    pub fn new(\n        allocator_in: *mut dyn LockedPageAllocator,\n        base_in:      *mut c_void,\n        size_in:      usize,\n        align_in:     usize\n    ) -> Self\n    {\n        Self {\n            arena: Arena::new(base_in, size_in, align_in),\n            base: base_in,\n            size: size_in,\n            allocator: allocator_in,\n        }\n    }\n\n    #[inline]\n    pub fn alloc(&mut self, sz: usize) -> *mut c_void {\n        self.arena.alloc(sz) \n    }\n\n    #[inline]\n    pub fn free(&mut self, p: *mut c_void) {\n        self.arena.free(p) \n    }\n\n    #[inline]\n    pub fn address_in_arena(&self, p: *mut c_void) -> bool {\n        self.arena.address_in_arena(p) \n    }\n\n    #[inline]\n    pub fn stats(&self) -> ArenaStats {\n        self.arena.stats() \n    }\n}\n\nimpl LockedPool {\n\n    /// Collect pool‑wide usage statistics.\n    pub fn stats(&self) -> LockedPoolStats {\n        let _guard = self.mutex().lock();\n    \n        let mut agg_used        = 0;\n        let mut agg_free        = 0;\n        let mut agg_total       = 0;\n        let mut agg_chunks_used = 0;\n        let mut agg_chunks_free = 0;\n    \n        for arena in self.arenas() {\n            let s = arena.stats();\n            agg_used        += *s.used();\n            agg_free        += *s.free();\n            agg_total       += *s.total();\n            agg_chunks_used += *s.chunks_used();\n            agg_chunks_free += *s.chunks_free();\n        }\n    \n        LockedPoolStatsBuilder::default()\n            .used(agg_used)\n            .free(agg_free)\n            .total(agg_total)\n            .locked(*self.cumulative_bytes_locked())\n            .chunks_used(agg_chunks_used)\n            .chunks_free(agg_chunks_free)\n            .build()\n            .expect(\"LockedPoolStatsBuilder::build failed\")\n    }\n}\n\n\nThis crate has the following authors:\n[\n    \"klebs6 <tpk3.mx@gmail.com>\",\n]\nThis crate has the following rust edition:\n2024\nThis crate has the following license:\nMIT\n","role":"user"}],"model":"gpt-4o"}}
