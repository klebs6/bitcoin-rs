{"custom_id":"request-0","method":"POST","url":"/v1/chat/completions","body":{"max_completion_tokens":8192,"messages":[{"content":"We would like you to write a README.md for a rust crate with maximally helpful content.\nAdditionally, we would like you to generate several fields from the Cargo.toml package section for this crate.\nWe will show you the strict json output format we would like you to provide.\nPlease tailor your response for an apex consumer of maximal intelligence.\nA reader of this README.md should have a good sense of what the crate does and how to use it after reading what you write.\nPlease include a messaage indicating that this README.md file was generated by an AI model and may not be 100% accurate however it should be pretty good.\n\n\nCarefully read and parse the information we sent you.\n\nWe want to generate all information items requested by our schema:\n\n- Read the description of each field. Use it, along with the content we sent you to generate an appropriate value for each.\n- Ensure that each generated field optimally serves its desired purpose.\n- Each item should be deep, detailed, and specific. Use optimally descriptive and useful language. Do not be too verbose.\n- Do not add any extra keys to the generated object. Generate precisely what we ask of you: no more, no less.\n- For fields which are of an enum type: pick *exactly one variant*. Do not generate any information for the unselected variants.\n- For array fields: supply a JSON list [ ... ] of items, each conforming to the correct item type.\n- For map fields: Provide a JSON object { \"key_as_string\": <value>, ... }. Keys must be valid JSON strings. Keys and Values must conform to the key and value schemas we provide to you. Fill all subfields of each and every map value.\n- If we ask you to justify a map field, provide your justification/confidence score for the entire map. Do not attempt to separately justify each map element.\n- Likewise, if we ask you to justify an array field, provide your justification/confidence score for the entire array. Do not attempt to separately justify each element.\n- Provide numeric fields as real JSON numbers (not strings).\n- For string fields: provide the value precisely as a string literal. If optional, you may set it to null.\n- If we ask you to justify or provide confidence scores for the fields of a structure, please do so carefully. For each field we ask you to justify, please explain or justify your choice clearly. Confidence scores must be specified as real JSON numbers in the range `[0..1]`.\n- If we ask to you generate an optional field, either fill it or set it to null.\n- If we ask you to justify your choice of an enum variant, please explain your choice clearly. Do not justify your decision to leave a variant unselected. Provide your justification as a JSON string. Provide your confidence score as a real JSON number in the range `[0..1]`.\n- In terms of the JSON format we would like you to provide, the object itself will be deserialied based on the following schema. \n- We begin exactly at the top: the data should not be nested under a parent named 'fields' or anything similar.\n\n## Here is the schema to use:\n\nObject {\n    \"fields\": Object {\n        \"crate_name\": Object {\n            \"generation_instructions\": String(\"\\\"This string should be the name of our crate, *verbatim*, trimmed for use as a toml field\\\"\"),\n            \"required\": Bool(true),\n            \"type\": String(\"string\"),\n        },\n        \"full_readme_markdown\": Object {\n            \"generation_instructions\": String(\"\\\"This string should be valid markdown representing the readme for this crate.\\\\n\\\\n Please make it terse, useful, and designed for an industrious commercially savy consumer of industrious nature. \\\\n\\\\n Advanced vocabulary and concepts are welcome. \\\\n\\\\n If this crate involves concepts from mathematics and/or physics, please describe and document them here.\\\"\"),\n            \"required\": Bool(true),\n            \"type\": String(\"string\"),\n        },\n        \"package_categories\": Object {\n            \"generation_instructions\": String(\"\\\"These categories will be used in our Cargo.toml file.\\\\n\\\\n It is important that users of this crate can find it on crates.io.\\\\n\\\\n Choose maximum 5 categories and make sure they are actually meaningful for our crate.\\\\n\\\\n These categories should only be chosen from among the legal crates.io categories. \\\\n\\\\n The ONLY legal categoreis are:\\\\n\\\\n``\\\\n accessibility\\\\n aerospace\\\\n algorithms\\\\n api-bindings\\\\n asynchronous\\\\n authentication\\\\n caching\\\\n command-line-interface\\\\n command-line-utilities\\\\n compilers\\\\n compression\\\\n computer-vision\\\\n concurrency\\\\n config\\\\n cryptography\\\\n data-structures\\\\n database\\\\n database-implementations\\\\n date-and-time\\\\n development-tools\\\\n email\\\\n embedded\\\\n emulators\\\\n encoding\\\\n external-ffi-bindings\\\\n filesystem\\\\n finance\\\\n game-development\\\\n game-engines\\\\n games\\\\n graphics\\\\n gui\\\\n hardware-support\\\\n internationalization\\\\n localization\\\\n mathematics\\\\n memory-management\\\\n multimedia\\\\n network-programming\\\\n no-std\\\\n os\\\\n parser-implementations\\\\n parsing\\\\n rendering\\\\n rust-patterns\\\\n science\\\\n simulation\\\\n template-engine\\\\n text-editors\\\\n text-processing\\\\n value-formatting\\\\n virtualization\\\\n visualization\\\\n wasm\\\\n web-programming\\\\n ``\\\\n\\\\n DO NOT specify a category that is not on this list.\\\"\"),\n            \"required\": Bool(true),\n            \"type\": String(\"array_of_strings\"),\n        },\n        \"package_description\": Object {\n            \"generation_instructions\": String(\"\\\"We will place this package_description in our Cargo.toml file so the users of this crate\\\\n know what it does.\\\\n\\\\n The discription should be technical, clear, and useful. It should be terse.\\\"\"),\n            \"required\": Bool(true),\n            \"type\": String(\"string\"),\n        },\n        \"package_keywords\": Object {\n            \"generation_instructions\": String(\"\\\"These keywords will be used in our Cargo.toml file so the users of this crate can easily\\\\n find it in the package system. Keywords should be useful, varied, meaningful, and reflect\\\\n the contents of our crate. They should make it easy to find. Please provide exactly five.\\\"\"),\n            \"required\": Bool(true),\n            \"type\": String(\"array_of_strings\"),\n        },\n    },\n    \"struct_docs\": String(\" This structure is a directive indicating which fields we need you to provide for us in your response to our query.\\n\"),\n    \"struct_name\": String(\"AiReadmeWriterDesiredOutput\"),\n    \"type\": String(\"struct\"),\n}\n\n## Please keep the following in mind:\n\nEntry phrasing:\n\n- Ensure entries are concise and focused.\n- Ensure there are no vague phrases (e.g., avoid starting with \"Illustrates the something something...\"; instead, use direct details like \"The hanging green vines on the garden wall\").\n\nEnsure Clarity and Consistency:\n\n- Use clear, grammatically correct sentences.\n- Maintain a consistent tone and style throughout.\n\nEnrich Content:\n\n- Communicate additional information where appropriate to enhance depth and value.\n- If a mathematical, physical, or otherwise technical background is helpful, please provide it.\n- Ensure that the content is comprehensive and meets all requirements.\n\nFocus Language:\n\n- Use deliberate and precise language.\n- Avoid vague verbs and keep the maximally intelligent and detail oriented audience in mind. \n- We explicitly ban the words `hush`, `subtle`, `mythic`, and `aura`. Please keep your vocabulary choices rigorous.\n- Do not use modern cultural references \n- Do not generically reference ideas which do not belong in the global environment.\n\n## Present the Final JSON:\n\n- Format the output as a JSON object.\n- Include all fields properly named from the schema we sent you.\n\nEnsure Proper Formatting:\n\n- Use proper JSON syntax with keys and arrays.\n- Ensure that all entries are correctly placed in their respective places.\n\nProvide only the final JSON data as specified by the schema. \n\nDo not include any schema generation instructions, meta-fields, nested-templates (unless directly asked) or extraneous information. \n\nProvide only the populated fields and their values, conforming exactly to the required structure without embedding any intermediate annotations or placeholders.\n\nYour output should only consist of the JSON object. do *not* include a preamble or postamble to your response. \n\nWe seek to successfully parse your response directly as JSON.","role":"system"},{"content":"We have a rust crate named 'bitcoin-arena' 0.1.1. \n\nHere is the interface:\npub type ArenaSizeToChunkSortedMap = MultiMap<usize,*mut u8>;\n\n\npub type ArenaSizeToChunkSortedMapIterator = Box<dyn Iterator<Item = (usize, *mut u8)>>;\n\n\npub type ArenaChunkToSizeMap = HashMap<*mut u8,ArenaSizeToChunkSortedMapIterator>;\n\n/**\n| Memory statistics.\n|\n*/\n#[derive(Getters, Builder, Default, Debug, Clone)]\n#[builder(setter(into, strip_option), pattern = \"owned\")]\n#[getset(get = \"pub\")]\npub struct ArenaStats  {\n    used:        usize,\n    free:        usize,\n    total:       usize,\n    chunks_used: usize,\n    chunks_free: usize,\n}\n\n\n#[no_copy]\npub struct Arena  {\n    free_by_offset: BTreeMap<usize /*offset*/, usize /*size*/>,\n    free_by_size:   BTreeMap<usize /*size*/, BTreeSet<usize /*offset*/>>,\n    used_chunks:    HashMap<usize /*offset*/, usize /*size*/>,\n    base:           *mut u8,\n    end:            *mut u8,\n    alignment:      usize,\n}\n\nimpl Arena {\n\n    /// **Safety contract:** `base_in â€¦ base_in+size_in` must remain valid\n    /// for the lifetime of the `Arena`.\n    pub fn new(base_in: *mut c_void, size_in: usize, alignment_in: usize) -> Self {\n        trace!(\n            \"Arena::new  base={:?} size={} align={}\",\n            base_in,\n            size_in,\n            alignment_in\n        );\n    \n        let mut free_by_offset = BTreeMap::new();\n        let mut free_by_size   = BTreeMap::new();\n    \n        free_by_offset.insert(0, size_in);\n        free_by_size\n            .entry(size_in)\n            .or_insert_with(BTreeSet::new)\n            .insert(0);\n    \n        Self {\n            free_by_offset,\n            free_by_size,\n            used_chunks: HashMap::new(),\n            base: base_in as *mut u8,\n            end:  (base_in as *mut u8).add(size_in),\n            alignment: alignment_in,\n        }\n    }\n\n    /// `true` if `ptr` lies inÂ `[base, end)`.\n    pub fn address_in_arena(&self, ptr: *mut c_void) -> bool {\n        let p = ptr as usize;\n        let b = self.base as usize;\n        let e = self.end  as usize;\n        p >= b && p < e\n    }\n\n    /// Allocate `size` bytes, returning a null pointer when the request\n    /// cannot be satisfied.\n    pub fn alloc(&mut self, size: usize) -> *mut c_void {\n        let size = align_up(size, self.alignment);\n        if size == 0 {\n            trace!(\"Arena::alloc size=0 â‡’ null\");\n            return std::ptr::null_mut();\n        }\n    \n        // --------  O(logâ€¯n) bestâ€‘fit search  --------\n        let (best_size, offsets) = match self.free_by_size.range(size..).next() {\n            Some(pair) => (*pair.0, pair.1.clone()), // clone BTreeSet (cheap)\n            None => {\n                trace!(\"Arena::alloc size={} â‡’ null (no space)\", size);\n                return std::ptr::null_mut();\n            }\n        };\n        let offset = *offsets.iter().next().expect(\"nonâ€‘empty set\");\n    \n        // --------  Remove chosen chunk from indices  --------\n        self.remove_free(offset, best_size);\n    \n        // --------  Split (take from tail)  -------------\n        let remaining = best_size - size;\n        if remaining != 0 {\n            self.insert_free(offset, remaining);\n        }\n        let alloc_offset = offset + remaining;\n        self.used_chunks.insert(alloc_offset, size);\n    \n        let ptr = unsafe { self.base.add(alloc_offset) } as *mut c_void;\n        trace!(\n            \"Arena::alloc size={} off={} (prev_chunk={}â†’rem={}) ptr={:?}\",\n            size,\n            alloc_offset,\n            best_size,\n            remaining,\n            ptr\n        );\n        ptr\n    }\n\n    /// Free a previously allocated block. Passing a null pointer is a noâ€‘op.\n    /// Invalid or doubleâ€‘free triggers a panic.\n    pub fn free(&mut self, ptr: *mut c_void) {\n        if ptr.is_null() {\n            trace!(\"Arena::free ptr=null â‡’ noâ€‘op\");\n            return;\n        }\n        assert!(self.address_in_arena(ptr), \"pointer outside arena\");\n    \n        // `offset` must remain accurate after leftâ€‘side coalescing, so it is mutable.\n        let mut offset = (ptr as usize) - (self.base as usize);\n        let mut size   = self\n            .used_chunks\n            .remove(&offset)\n            .expect(\"Arena: invalid or double free\");\n    \n        // --------------------  Coalesce left  --------------------\n        if let Some((&prev_off, &prev_sz)) = self.free_by_offset.range(..offset).next_back() {\n            if prev_off + prev_sz == offset {\n                self.remove_free(prev_off, prev_sz);\n                offset = prev_off;           // <-- keep chunk start correct\n                size   += prev_sz;\n                trace!(\"Arena::free coalesced left @0x{:x}\", prev_off);\n            }\n        }\n    \n        // --------------------  Coalesce right  -------------------\n        if let Some((&next_off, &next_sz)) = self.free_by_offset.range(offset + size..).next() {\n            if offset + size == next_off {\n                self.remove_free(next_off, next_sz);\n                size += next_sz;\n                trace!(\"Arena::free coalesced right @0x{:x}\", next_off);\n            }\n        }\n    \n        // --------------------  Final insert  ---------------------\n        self.insert_free(offset, size);\n        trace!(\"Arena::free final chunk off=0x{:x} size={}\", offset, size);\n    }\n\n    /// O(chunks) statistics aggregation.\n    pub fn stats(&self) -> ArenaStats {\n        let used: usize  = self.used_chunks.values().sum();\n        let free: usize  = self.free_by_offset.values().sum();\n        let total        = used + free;\n        let chunks_used  = self.used_chunks.len();\n        let chunks_free  = self.free_by_offset.len();\n    \n        trace!(\n            \"Arena::stats used={} free={} total={} cu={} cf={}\",\n            used,\n            free,\n            total,\n            chunks_used,\n            chunks_free\n        );\n    \n        ArenaStatsBuilder::default()\n            .used(used)\n            .free(free)\n            .total(total)\n            .chunks_used(chunks_used)\n            .chunks_free(chunks_free)\n            .build()\n            .expect(\"stats complete\")\n    }\n\n    /// Humanâ€‘readable dump when `ARENA_DEBUG` is enabled.\n    #[cfg(ARENA_DEBUG)]\n    pub fn walk(&self) {\n        use std::fmt::Write;\n        let mut s = String::new();\n        writeln!(&mut s, \"USED:\").ok();\n        for (off, sz) in &self.used_chunks {\n            writeln!(&mut s, \"  0x{:08x}Â +Â {}\", off, sz).ok();\n        }\n        writeln!(&mut s, \"FREE:\").ok();\n        for (off, sz) in &self.free_chunks {\n            writeln!(&mut s, \"  0x{:08x}Â +Â {}\", off, sz).ok();\n        }\n        debug!(\"{}\", s);\n    }\n}\n\n\nThis crate has the following authors:\n[\n    \"klebs6 <tpk3.mx@gmail.com>\",\n]\nThis crate has the following rust edition:\n2024\nThis crate has the following license:\nMIT\n","role":"user"}],"model":"gpt-4o"}}
