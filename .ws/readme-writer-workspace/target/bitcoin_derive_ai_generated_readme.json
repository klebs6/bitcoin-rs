{
  "crate_name": "bitcoin-derive",
  "full_readme_markdown": "# `bitcoin-derive`\n\n`bitcoin-derive` is a Rust procedural macro library designed to enhance concurrency and object interaction patterns for projects related to Bitcoin. Utilizing Rust's powerful procedural macros, this crate provides a series of attributes that facilitate compile-time guarantees and annotations for various concurrency and object modeling constructs.\n\n## Features\n\n- **Concurrency Control**: Decorate functions and methods with macros like `LOCKABLE`, `EXCLUSIVE_LOCK_FUNCTION`, `SCOPED_LOCKABLE`, and `LOCKS_EXCLUDED` to constraint and manage locking behavior.\n- **Signal-Slot Mechanism**: Implement Qt-inspired signal and slot patterns using `Q_SIGNAL`, `Q_SIGALS`, `Q_SLOT`, and `Q_SLOTS` attributes, enhancing modular event-driven designs.\n- **Fuzz Testing**: Annotate test functions with `fuzz` and `fuzz_test` for integration with fuzz testing tools.\n- **Annotation Attributes**: Utilize `no_copy`, `no_move`, and `NO_THREAD_SAFETY_ANALYSIS` to provide explicit specification of intended data handling and thread safety behaviors.\n\n## Getting Started\n\nTo integrate `bitcoin-derive` into your Rust project, include it as a dependency in your `Cargo.toml`:\n\n```toml\n[dependencies]\nbitcoin-derive = \"0.1.18\"\n```\n\nThen, import the macros and use them to annotate your functions and structs:\n\n```rust\nuse bitcoin_derive::{LOCKABLE, Q_SIGNAL};\n\n#[LOCKABLE]\nfn protected_function() {\n    // Implementation \n}\n\n#[Q_SIGNAL]\nfn emit_signal() {\n    // Emit signal logic\n}\n```\n\n## Documentation\n\nFor comprehensive usage and examples, please refer to the [official repository](https://github.com/klebz/bitcoin-rs) where detailed documentation and example code snippets are available.\n\n## License\n\nThis project is licensed under the MIT License.\n\n---\n\n*This README.md file is auto-generated by an AI model. Please verify contents for absolute accuracy.*",
  "package_categories": [
    "concurrency",
    "web-programming",
    "compilers",
    "macros",
    "programming-utilities"
  ],
  "package_description": "A procedural macro crate providing attributes for concurrency control, signal-slot mechanisms, and fuzz testing, designed for Bitcoin-related Rust projects.",
  "package_keywords": [
    "bitcoin",
    "procedural macros",
    "concurrency",
    "signals",
    "fuzzing"
  ]
}