{
  "crate_name": "bitcoin-u160",
  "full_readme_markdown": "# bitcoin-u160\n\nThe `bitcoin-u160` crate provides an efficient representation for handling 160-bit opaque data blobs, typically used in Bitcoin and cryptographic applications. This crate is especially useful for developers seeking a robust, low-level interface for managing and manipulating 160-bit data structures without the overhead of integer operations.\n\n## Features\n\n- **Efficient Data Handling**: `u160` offers methods to construct from strings, vectors, and byte arrays, maintaining the integrity and validity of 160-bit data.\n- **Compile-Time Array Construction**: Provides an interface to construct a `u160` object at compile-time using 20-byte arrays.\n- **String Conversion**: Supports conversion to and from strings in hexadecimal format, providing ease of use for developers.\n- **Compatibility with Byte Conventions**: Mirrors standard library conventions for byte ordering, supporting little-endian conversions.\n- **Debugging and Logging**: Includes formatting capabilities that integrate with standard Rust `Debug` traits and supports tracing for observability.\n\n## Usage\n\nAdd `bitcoin-u160` to your `Cargo.toml`:\n\n```toml\n[dependencies]\nbitcoin-u160 = \"0.1.18\"\n```\n\n### Example\n\n```rust\nuse bitcoin_u160::u160;\n\nfn main() {\n    // Create a u160 instance from a hexadecimal string\n    let my_u160 = u160::from(\"0123456789abcdef0123456789abcdef01234567\");\n    println!(\"{:?}\", my_u160);\n\n    // Convert a byte array into a u160 instance\n    let bytes: [u8; 20] = [0u8; 20];\n    let my_u160_from_bytes = u160::from_le_bytes(bytes);\n    println!(\"{:?}\", my_u160_from_bytes);\n}\n```\n\nFor detailed documentation and further examples, visit the [repository](https://github.com/klebz/bitcoin-rs).\n\n---\nThis README file was generated by an AI model and may not be 100% accurate. However, it should provide a good foundational understanding of how to work with the `bitcoin-u160` crate.",
  "package_categories": [
    "cryptography",
    "data-structures",
    "network-programming",
    "finance",
    "science"
  ],
  "package_description": "A Rust crate for efficiently handling 160-bit opaque blobs, commonly used in cryptographic and Bitcoin-related contexts, with support for conversion from strings and byte arrays.",
  "package_keywords": [
    "bitcoin",
    "cryptography",
    "data-structure",
    "hexadecimal",
    "u160"
  ]
}