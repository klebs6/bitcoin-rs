{
  "crate_name": "bitcoin-blob",
  "full_readme_markdown": "# bitcoin-blob\n\n`bitcoin-blob` is a highly specialized Rust library designed to handle fixed-size, opaque byte arrays known as blobs. It provides extensive functionality for iterating, serializing, deserializing, hex encoding/decoding, and more.\n\n## Features\n\n- **Flexible Blob Definitions:** Define blobs of arbitrary bit/byte sizes using powerful macros.\n- **Iterators:** Seamlessly iterate over blob data in mutable and immutable forms.\n- **Serialization:** Robust functionality to serialize blobs to and from streams.\n- **Hex Utilities:** Convert blobs to hexadecimal strings and vice versa.\n- **Typical Operations:** Includes utility methods for checking if blobs are null, comparing blobs, and basic byte-level manipulations.\n- **Deterministic RNG:** Includes a simple RNG for deterministic testing purposes.\n\n## Usage\n\nBelow is an example of how to define and use a 256-bit blob:\n\n```rust\n#[macro_use]\nextern crate bitcoin_blob;\n\nbase_blob!(BaseBlob256, 256, 32);\n\nfn main() {\n    let mut blob = BaseBlob256::zero();\n    blob.set_hex_from_str(\"abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890\");\n    println!(\"Hex: {}\", blob.to_string());\n}\n```\n\nFor comprehensive examples and detailed information on each macro, refer to the [documentation](https://github.com/klebz/bitcoin-rs).\n\n## License\n\n`bitcoin-blob` is licensed under the MIT License.\n\n---\n\n*Disclaimer: This README.md was generated by an AI model and may not be 100% accurate; however, it should be pretty good.*",
  "package_categories": [
    "cryptography",
    "data-structures",
    "serialization",
    "macros",
    "development-tools"
  ],
  "package_description": "Rust library for defining and manipulating fixed-size opaque byte blobs with serialization, deserialization, hex conversion, and byte iteration capability.",
  "package_keywords": [
    "bitcoin",
    "blob",
    "serialization",
    "hexadecimal",
    "macros"
  ]
}